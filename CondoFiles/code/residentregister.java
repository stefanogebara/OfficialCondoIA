
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author stefa
 */
public class residentregister extends javax.swing.JFrame {
    
    static final String DB_URL = DatabaseHelper.DB_URL;
    static final String USER = DatabaseHelper.DB_USER;
    static final String PASS = DatabaseHelper.DB_PASS;

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    private User user;
    private JFrame parent;
        
    public residentregister(User user, JFrame parent) {
        this.user = user;
        this.parent = parent;
        initComponents();
        try {
            populateCondoComboBox();
        } catch (SQLException ex) {
            Logger.getLogger(residentregister.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void populateCondoComboBox() throws SQLException {
    
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS))
        {
            String query = """
                        SELECT * FROM condominium C
                            INNER JOIN condohasadmin CA
                                ON C.ID = CA.IdCondoId
                        WHERE CA.IdAdminId = ?""";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, user.getID());
            ResultSet rs = stmt.executeQuery();
        
            

            while (rs.next()) {
                this.listCondominiuns.addItem(rs.getString("Name"));
            }
        }   
        catch (SQLException e) {
        // Handle the error. Maybe show a message to the user.
        }
    }
    
   
        
   
    
    public residentregister() throws SQLException {
        initComponents();
        populateCondoComboBox();
    }

    private boolean validateResidentCredentials(String name, String surname, String email, String password) {
        return !(name.isEmpty() || surname.isEmpty() || email.isEmpty() || password.isEmpty());
    }

    private int insertResident(String name, String surname, String email, String password) throws SQLException {
    String query = "INSERT INTO resident (name, surename, email, password) VALUES (?, ?, ?, ?)";
    try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
         PreparedStatement statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {

        statement.setString(1, name);
        statement.setString(2, surname);
        statement.setString(3, email);
        statement.setString(4, password);

        statement.executeUpdate();

        ResultSet generatedKeys = statement.getGeneratedKeys();
        if (generatedKeys.next()) {
            return generatedKeys.getInt(1);  // Return the generated resident ID
        } else {
            throw new SQLException("Creating resident failed, no ID obtained.");
        }
    }
}
    
    private void associateResidentWithCondo(int residentId, String condoName) throws SQLException {
    // Use the correct column name from the condo table (replace condo_id if it's different in your schema)
    String query = "INSERT INTO condo_has_resident(id_resident_id, id_condo_id) SELECT ?, condo_id FROM condo WHERE condo_name = ?";
    try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
         PreparedStatement statement = connection.prepareStatement(query)) {

        statement.setInt(1, residentId);
        statement.setString(2, condoName);

        statement.executeUpdate();
    }
}


    // Helper method to validate email using regular expression
    private boolean validateEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pat = Pattern.compile(emailRegex);
        return email != null && pat.matcher(email).matches();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back_btn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        register_btn = new javax.swing.JButton();
        email_txt = new javax.swing.JTextField();
        password_txt = new javax.swing.JPasswordField();
        clear_btn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        surename_txt = new javax.swing.JTextField();
        name_txt = new javax.swing.JTextField();
        listCondominiuns = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        listApartments = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Resident");
        setResizable(false);

        back_btn.setText("Back");
        back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_btnActionPerformed(evt);
            }
        });

        jLabel2.setText("Email");

        jLabel3.setText("Password");

        register_btn.setText("Register");
        register_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                register_btnActionPerformed(evt);
            }
        });

        email_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                email_txtActionPerformed(evt);
            }
        });

        clear_btn.setText("Clear");
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        jLabel4.setText("Surename");

        jLabel5.setText("Name");

        surename_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surename_txtActionPerformed(evt);
            }
        });

        name_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name_txtActionPerformed(evt);
            }
        });

        listCondominiuns.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listCondominiunsItemStateChanged(evt);
            }
        });
        listCondominiuns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listCondominiunsActionPerformed(evt);
            }
        });

        jLabel6.setText("Apartment");

        listApartments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listApartmentsActionPerformed(evt);
            }
        });

        jLabel7.setText("Condominium");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back_btn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 94, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(listCondominiuns, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(clear_btn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(register_btn))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(listApartments, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGap(67, 67, 67))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(password_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(surename_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(69, 69, 69))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(surename_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listCondominiuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listApartments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(register_btn)
                    .addComponent(clear_btn)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void close(){
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
    private void back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_btnActionPerformed
        close();
        this.parent.setVisible(true);        
    }//GEN-LAST:event_back_btnActionPerformed

    private void register_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_register_btnActionPerformed
        // Retrieve values from text fields
    String name = name_txt.getText();
    String surename = surename_txt.getText();
    String email = email_txt.getText();
    String password = new String(password_txt.getPassword());
    String condoName = (String) listCondominiuns.getSelectedItem();

    if (name.isEmpty() || surename.isEmpty() || email.isEmpty() || password.isEmpty() || condoName == null) {
        JOptionPane.showMessageDialog(null, "Please fill out all fields!");
        return;
    }

    try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS)) {
        // Inserting the resident's details
        String residentInsertQuery = "INSERT INTO resident(FirstName, LastName, Email, Pass) VALUES(?, ?, ?, ?)";
        PreparedStatement residentStatement = connection.prepareStatement(residentInsertQuery, Statement.RETURN_GENERATED_KEYS);
        
        residentStatement.setString(1, name);
        residentStatement.setString(2, surename);
        residentStatement.setString(3, email);
        residentStatement.setString(4, password);
                
        int affectedRows = residentStatement.executeUpdate();

        if (affectedRows > 0) {
            try (ResultSet generatedKeys = residentStatement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    String associateCondominion = """
                                                  INSERT INTO residenthasapartments VALUES(?, (SELECT ApartmentId 
                                                    FROM apartments A 
                                                  INNER JOIN condominium C 
                                                           ON A.CondoId = C.ID 
                                                  \twhere A.Number = ? AND C.Name = ?))""";

                    residentStatement = connection.prepareStatement(associateCondominion);

                    residentStatement.setInt(1, generatedKeys.getInt(1));
                    residentStatement.setString(2, this.listApartments.getItemAt(listApartments.getSelectedIndex()));
                    residentStatement.setString(3, condoName);
                    
                    residentStatement.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Resident created and associated with apartment!");
                } else {
                    JOptionPane.showMessageDialog(null, "Failure when trying to associate with apartment!");
                }
            }
        }

        
        String insertHasApartment = "INSERT INTO residenthasapartments(FirstName, LastName, Email, Pass) VALUES(?, ?, ?, ?)";
        residentStatement = connection.prepareStatement(residentInsertQuery, Statement.RETURN_GENERATED_KEYS);
        
        residentStatement.setString(1, name);
        residentStatement.setString(2, surename);
        residentStatement.setString(3, email);
        residentStatement.setString(4, password);
        
        residentStatement.executeUpdate();

        JOptionPane.showMessageDialog(null, "Registered successfully!");
    } catch (SQLException ex) {
        Logger.getLogger(residentregister.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "An error occurred. Please try again.");
    }
        
    
    }//GEN-LAST:event_register_btnActionPerformed
    private void storeUser(String name, String surename, String email, String password) {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        
        // Modified SQL query to include name and surename
        PreparedStatement ps = conn.prepareStatement("INSERT INTO resident(name, surename, email, password) VALUES (?, ?, ?, ?)");
        ps.setString(1, name);
        ps.setString(2, surename);
        ps.setString(3, email);
        ps.setString(4, password);
        
        ps.execute();
        JOptionPane.showMessageDialog(null, "User Registered Successfully!");
    } catch (SQLException | ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage());
    }
}
    
    // Helper method to validate email using regular expression
    
    
    private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
        email_txt.setText(null);
        password_txt.setText(null);
    }//GEN-LAST:event_clear_btnActionPerformed

    private void email_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_email_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_email_txtActionPerformed

    private void surename_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surename_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surename_txtActionPerformed

    private void name_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_name_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_name_txtActionPerformed

    private void listCondominiunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listCondominiunsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listCondominiunsActionPerformed

    private void listApartmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listApartmentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listApartmentsActionPerformed

    private void listCondominiunsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listCondominiunsItemStateChanged
        // TODO add your handling code here:
    
        this.listApartments.removeAllItems();
        
        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS))
        {
            String query = "SELECT * FROM apartments A WHERE CondoId = (SELECT ID FROM condominium WHERE Name = ?);";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, this.listCondominiuns.getItemAt(listCondominiuns.getSelectedIndex()));
            ResultSet rs = stmt.executeQuery();        
            

            while (rs.next()) {
                this.listApartments.addItem(rs.getString("Number"));
            }
        }   
        catch (SQLException e) {
        // Handle the error. Maybe show a message to the user.
        }
    
    }//GEN-LAST:event_listCondominiunsItemStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(residentregister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(residentregister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(residentregister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(residentregister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new residentregister().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(residentregister.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_btn;
    private javax.swing.JButton clear_btn;
    private javax.swing.JTextField email_txt;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> listApartments;
    private javax.swing.JComboBox<String> listCondominiuns;
    private javax.swing.JTextField name_txt;
    private javax.swing.JPasswordField password_txt;
    private javax.swing.JButton register_btn;
    private javax.swing.JTextField surename_txt;
    // End of variables declaration//GEN-END:variables
}
