
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;

/**
 *
 * @author stefa
 */
public class IdeaForm extends javax.swing.JFrame {

    private static final String DB_URL = DatabaseHelper.DB_URL;
    private static final String DB_USER = DatabaseHelper.DB_USER;
    private static final String DB_PASS = DatabaseHelper.DB_PASS;
    private int _residentId = 0;
    private int _selectedId = 0;
    private javax.swing.JFrame parent; 
    private User user;
    
    public IdeaForm() {
        initComponents();
         _residentId = 1;
        this.loadIdeasIntoTable();
    }
    public IdeaForm(User user, javax.swing.JFrame frame){
        
    this.parent = frame;
    this.user = user;
     initComponents();
    
     _residentId = user.getID();
    
    this.loadIdeasIntoTable();
    
    
    if(user.getUserType() != UserType.RESIDENT){
     btnVote.setEnabled(false);
    }
    
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableIdea = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        btnVote = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableIdea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableIdea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableIdeaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableIdea);

        jScrollPane2.setViewportView(txtDescription);

        jLabel1.setText("Description:");

        btnVote.setText("Vote");
        btnVote.setEnabled(false);
        btnVote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVote)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVote)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableIdeaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableIdeaMouseClicked
        if (evt.getClickCount() == 1) {
            int selectedRow = tableIdea.getSelectedRow();

            // Carregando os valores em variáveis
            _selectedId = (int) tableIdea.getValueAt(selectedRow, 0);
            String description = (String) tableIdea.getValueAt(selectedRow, 1);
            this.txtDescription.setText(description);
            btnVote.setEnabled(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_tableIdeaMouseClicked

    private void btnVoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoteActionPerformed
        this.saveVote(_selectedId, _residentId);
        this.txtDescription.setText("");
        loadIdeasIntoTable();
    }//GEN-LAST:event_btnVoteActionPerformed
    public static void saveVote(int ideaID, int residentID) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Conecta ao banco de dados
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);

            // Verifica se o voto já existe
            String checkSql = "SELECT * FROM IdeasHasVotes WHERE IdeaID = ? AND ResidentID = ?";
            pstmt = conn.prepareStatement(checkSql);
            pstmt.setInt(1, ideaID);
            pstmt.setInt(2, residentID);

            rs = pstmt.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(null,"You have already voted for this idea.");
                return;
            }

            // Fecha o ResultSet e PreparedStatement anteriores para reutilizá-los
            rs.close();
            pstmt.close();

            // Prepara o comando SQL para inserir um novo voto
            String insertSql = "INSERT INTO IdeasHasVotes (IdeaID, ResidentID) VALUES (?, ?)";
            pstmt = conn.prepareStatement(insertSql);

            // Preenche os campos da consulta
            pstmt.setInt(1, ideaID);
            pstmt.setInt(2, residentID);

            // Executa o comando SQL
            pstmt.executeUpdate();

            JOptionPane.showMessageDialog(null, "Vote successfully counted");


        } catch (SQLException e) {
            // Manipula qualquer erro que possa ocorrer
            JOptionPane.showMessageDialog(null, e.getMessage());
        } finally {
            // Fecha os recursos
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }
    
    public void loadIdeasIntoTable() {
        if(user.getUserType() == UserType.MANAGER) {
            loadIdeasForManager();
        } else {
            loadIdeasForResident();
        }
    }

    public void loadIdeasForResident() {
    try {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = "SELECT Ideas.ID, Description,IsStructural, Budget, Type, COUNT(IdeasHasVotes.IdeaID) as TotalVotes FROM Ideas LEFT JOIN IdeasHasVotes ON Ideas.ID = IdeasHasVotes.IdeaID GROUP BY Ideas.ID, Ideas.Description;";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();

        DefaultTableModel model = new DefaultTableModel(
            new Object [][] {},
            new String [] {"ID", "Description", "IsStructural", "Budget", "Type", "Votes"}
        );
        this.tableIdea.setModel(model);
        // Preenchimento do DefaultTableModel
        while(rs.next()) {
            Object[] row = new Object[6];
            row[0] = rs.getInt("ID");
            row[1] = rs.getString("Description");
            row[2] = rs.getBoolean("IsStructural");
            row[3] = rs.getFloat("Budget");
            row[4] = rs.getString("Type");
            row[4] = rs.getString("TotalVotes");

            model.addRow(row);
        }

        // Fechamento de recursos
        rs.close();
        pstmt.close();
        conn.close();


 

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
}
    
    public void loadIdeasForManager() {
        try {
        Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        String sql = """
                     SELECT COUNT(*) / 2 AS 'HalfTotalApartments' FROM apartments A
                         INNER JOIN condominium C
                             ON A.CondoId = C.ID
                         INNER JOIN condohasadmin CA
                             ON C.ID = CA.IdCondoId
                         WHERE CA.IdAdminId = ?""";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setInt(1, user.getID());
        ResultSet rs = pstmt.executeQuery();
        
        
        if(rs.next()) {            
            float halfTotalApartments = rs.getFloat("HalfTotalApartments");
            
            sql = """
                  SELECT Ideas.ID, Description,IsStructural, Budget, Type, COUNT(IdeasHasVotes.IdeaID) as TotalVotes
                  FROM Ideas
                      LEFT JOIN IdeasHasVotes
                          ON Ideas.ID = IdeasHasVotes.IdeaID
                      INNER JOIN resident R
                          ON R.ID = IdeasHasVotes.ResidentID
                      INNER JOIN residenthasapartments RA
                          ON R.ID = RA.ResidentID
                      INNER JOIN apartments A
                          ON RA.ApartmentId = A.ApartmentId
                      INNER JOIN condominium C
                          ON A.CondoId = C.ID
                      INNER JOIN condohasadmin CA
                          ON C.ID = CA.IdCondoId
                  WHERE CA.IdAdminId = ?
                  GROUP BY Ideas.ID, Ideas.Description;""";
            
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, user.getID());
            rs = pstmt.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel(
            new Object [][] {},
            new String [] {"ID", "Description", "IsStructural", "Budget", "Type", "Votes"}
            );
            
            this.tableIdea.setModel(model);
            // Preenchimento do DefaultTableModel
            while(rs.next()) {
                Object[] row = new Object[6];
                row[0] = rs.getInt("ID");
                row[1] = rs.getString("Description");
                row[2] = rs.getBoolean("IsStructural");
                row[3] = rs.getFloat("Budget");
                row[4] = rs.getString("Type");
                
                int totalVotes = rs.getInt("TotalVotes");
                
                row[4] = totalVotes;
                    
                
                if((halfTotalApartments / totalVotes) > 0.5) 
                {                
                    model.addRow(row);
                }
        }
        
        // Fechamento de recursos
        rs.close();
        pstmt.close();
        conn.close();
       }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IdeaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IdeaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IdeaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IdeaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IdeaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVote;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableIdea;
    private javax.swing.JTextPane txtDescription;
    // End of variables declaration//GEN-END:variables
}
